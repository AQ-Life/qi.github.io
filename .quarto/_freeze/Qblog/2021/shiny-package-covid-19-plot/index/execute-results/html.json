{
  "hash": "ca8b4661cd898067635dca1d820068c0",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Shiny package 绘制 COVID-19 Plot\ndate: '2021-11-18'\ntags:\n- R\n- Tidyverse\n- shiny\ncategories:\n- R\n- Tidyverse\n- shiny\n---\n\n\n\nShiny package 是在R中进行数据分析可视化非常著名的一个包，我们就采用这个包来展示他的一些功能。 数据来源和前期数据处理的解释，请参考上一篇文章 [R绘制COVID-19新增病例趋势图](https://aqlife.netlify.app/post/r/r-covid-19/r-covid-19/) ，这里直接放上前半部分的程序。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#清空工作环境\nrm(list = ls())\noptions(digits = 4)\n\nlibrary(readxl)\nlibrary(dplyr)\nlibrary(shiny)\nlibrary(ggplot2)\ncovid <- read.csv(\"owid-covid-data.csv\")\ncountry <- read_excel(\"国家和地区代码.xlsx\",\n                     col_names=TRUE)\n\ncovid1 <- transform(covid, \n                    peo_vac=people_vaccinated/10000, \n                    peo_fvac=people_fully_vaccinated/10000,\n                    ana_new=new_cases,\n                    ana_dea=new_deaths,\n                    low=0)\n\ncovidvac1 <- subset(covid1, subset = (peo_vac!=\"NA\"), select = c(iso_code, date, people_vaccinated_per_hundred, people_fully_vaccinated_per_hundred))\ncovidvac2 <- aggregate(covidvac1, by = list(covidvac1$iso_code), FUN = last)\ncovidvac3 <- rename(covidvac2, c(peo_vac1 = \"people_vaccinated_per_hundred\", peo_fvac1 = \"people_fully_vaccinated_per_hundred\"))\ncovid2 <- left_join(covid1,\n                    covidvac3,\n                    by=c(\"iso_code\"=\"iso_code\", \"date\"=\"date\"))\n                    \ncountry1 <- subset(country, \n                   subset = (X6!=\"NA\"), \n                   select = c(X2,X3,X6))\n\nanadata1 <- left_join(covid2,\n                      country1,\n                      by=c(\"iso_code\"=\"X6\"))\n\n#定义移动平均数的函数\nmav <- function(a,n){\n  stats::filter(a,rep(1/n,n),sides = 1)\n}\nanadata2 <- transform(anadata1,\n                      mean_new=mav(ana_new,7),\n                      mean_dea=mav(ana_dea,7),\n                      country_code=paste(iso_code,\"_\",X2,\"_\",X3))\n\ncountryname <- unique(anadata2$country_code)\n```\n:::\n\n\n\n接下来就是 shiny 包，准备针对每个国家绘制 新增病例、死亡、接种疫苗 三个图形，UI 设计程序如下：\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nui <- fluidPage(\n  titlePanel(\"COVID-19\"),\n  sidebarLayout(\n    sidebarPanel(\n      selectInput(\"country_code\",\n                  \"Country:\",\n                  countryname),\n      radioButtons(\"ratio\", label = \"R Plot\",\n                   choices = list(\"新增病例\" = 1, \"死亡\" = 2, \"接种疫苗\" = 3),\n                   selected = 1)\n    ),\n    mainPanel(\n      h2(textOutput(\"textoutput\")),\n      plotOutput(\"plotoutput\")\n    )\n  )\n)\n```\n:::\n\n\n\nSERVER 服务器端程序基本同上一篇的文章的 ggplot2 绘图。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nserver <- function(input, output){\n  formulaText <- reactive({\n    input$country_code\n  })\n  \n  output$textoutput <- renderText({\n    formulaText()\n  })\n  \n  output$plotoutput <- renderPlot({\n    plotdata <- switch (input$country_code,\n        subset(anadata2,country_code==input$country_code)\n    )\n    \n    p1 <- ggplot(plotdata,aes(x=as.Date(date))) + \n      {if(input$ratio == 1) geom_col(aes(y=ana_new,fill=\"g_col\"))} +\n      {if(input$ratio == 2) geom_col(aes(y=ana_dea,fill=\"g_col\"))} +\n      {if(input$ratio == 3) geom_area(aes(y=peo_vac,fill=\"g_area1\"))} +\n      {if(input$ratio == 3) geom_area(aes(y=peo_fvac,fill=\"g_area2\"))} +\n      {if(input$ratio == 1) geom_line(aes(y=mean_new,color=\"g_line\"),size=1)} +\n      {if(input$ratio == 2) geom_line(aes(y=mean_dea,color=\"g_line\"),size=1)} +\n      {if(input$ratio == 3) geom_text(aes(y=peo_vac, label=peo_vac1))} +\n      {if(input$ratio == 3) geom_text(aes(y=peo_fvac, label=peo_fvac1))} +\n      \n      labs(x=NULL,y=NULL) +\n      scale_x_date(date_label=\"%y/%m/%d\",\n                   date_breaks = \"3 month\",\n                   minor_breaks = \"1 month\") +\n      {if(input$ratio == 1) scale_fill_manual(breaks = c(\"g_col\"), \n                             values = c(\"#cad5e5\"), \n                             label = c(\"New Case\"))} + \n      {if(input$ratio == 2) scale_fill_manual(breaks = c(\"g_col\"), \n                                              values = c(\"#c5c4c5\"), \n                                              label = c(\"Death\"))} + \n      {if(input$ratio == 3) scale_fill_manual(breaks = c(\"g_area1\", \"g_area2\"), \n                                              values = c(\"#b9cfe7\", \"#8ca6ce\"), \n                                              label = c(\"Vaccined\", \"Fully Vaccined\"))} +\n      {if(input$ratio == 1) scale_color_manual(breaks = c(\"g_line\"),\n                                               values = c(\"blue\"), \n                                               label = c(\"Monving Average\"))} +\n      {if(input$ratio == 2) scale_color_manual(breaks = c(\"g_line\"),\n                                               values = c(\"#616161\"), \n                                               label = c(\"Monving Average\"))} +\n      \n      theme(plot.title =element_text(hjust = 0.5, vjust = 0.5), \n            legend.position = \"bottom\", \n            legend.title = element_blank(), \n            legend.background = element_blank()) \n    \n    p2 <- p1 + theme(panel.background=element_rect(fill='transparent', \n                                                   color='gray'),\n                     legend.key=element_rect(fill='transparent', \n                                             color='transparent'))\n    p2\n  })\n}\n```\n:::\n\n\n\n最后就是 run script。\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#shinyApp(ui = ui, server = server)\n```\n:::\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}